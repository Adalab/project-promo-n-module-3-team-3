{"ast":null,"code":"var _jsxFileName = \"/Users/monipeny/Proyectos/ADALAB/Proyecto-modulo-3/project-promo-n-module-3-team-3/src/components/ImageInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ImageReader = props => {\n  _s();\n\n  const fileElement = useRef(); // referencia al input file\n\n  const fileReader = new FileReader(); // Creamos un lector de ficheros con FileReader: funcionalidad nativa de JS\n  // Cuando la usuaria selecciona una imagen se ejecuta esta función\n\n  const handleFile = () => {\n    const selectedFile = fileElement.current.files[0]; // fileElement.current.files es un array con todas las imagenes seleccionadas\n    // Si la usuaria ha seleccionado al menos una imagen selectedFile es diferente de undefined\n\n    if (selectedFile) {\n      fileReader.readAsDataURL(selectedFile); // Le decimos al lector de ficheros que lea el fichero seleccionado por la usuaria. Cuando esta acción termine fileReader lanzará el evento 'load'\n    }\n  }; // Esta función se ejecuta cuando fileReader lanza el evento 'load'\n\n\n  const getImage = () => {\n    props.handleImage(fileReader.result); // Cuando la imagen ya está lista en fileReader.result tenemos su contenido. Hacemos lifting\n  };\n\n  fileReader.addEventListener(\"load\", getImage); // Escuchamos el evento load de fileReader y cuando se lance lo manejamos con la función getImage\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"image\",\n      className: \"label\",\n      children: [\"Imagen de perfil\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"span\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"action__upload-btn\",\n        htmlFor: \"photo\",\n        children: \"A\\xF1adir Imagen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileElement,\n        onChange: handleFile,\n        type: \"file\",\n        name: \"photo\",\n        id: \"photo\",\n        className: \"action__hiddenField js__profile-upload-btn\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"AQUI profile__preview js__profile-preview\",\n        style: {\n          backgroundImage: `url(${props.data.photo})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true); //handleImage={handleImage} />\n};\n\n_s(ImageReader, \"gle4pPNUbbH4xmY6yoIHyORFnLQ=\");\n\n_c = ImageReader;\nexport default ImageReader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageReader\");","map":{"version":3,"sources":["/Users/monipeny/Proyectos/ADALAB/Proyecto-modulo-3/project-promo-n-module-3-team-3/src/components/ImageInput.js"],"names":["useRef","ImageReader","props","fileElement","fileReader","FileReader","handleFile","selectedFile","current","files","readAsDataURL","getImage","handleImage","result","addEventListener","backgroundImage","data","photo"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,WAAW,GAAGH,MAAM,EAA1B,CAD6B,CACC;;AAC9B,QAAMI,UAAU,GAAG,IAAIC,UAAJ,EAAnB,CAF6B,CAEQ;AAErC;;AACA,QAAMC,UAAU,GAAG,MAAM;AACvB,UAAMC,YAAY,GAAGJ,WAAW,CAACK,OAAZ,CAAoBC,KAApB,CAA0B,CAA1B,CAArB,CADuB,CAC4B;AACnD;;AACA,QAAIF,YAAJ,EAAkB;AAChBH,MAAAA,UAAU,CAACM,aAAX,CAAyBH,YAAzB,EADgB,CACwB;AACzC;AACF,GAND,CAL6B,CAa7B;;;AACA,QAAMI,QAAQ,GAAG,MAAM;AACrBT,IAAAA,KAAK,CAACU,WAAN,CAAkBR,UAAU,CAACS,MAA7B,EADqB,CACiB;AACvC,GAFD;;AAIAT,EAAAA,UAAU,CAACU,gBAAX,CAA4B,MAA5B,EAAoCH,QAApC,EAlB6B,CAkBkB;;AAC/C,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAuB,MAAA,SAAS,EAAC,OAAjC;AAAA,kDAEE;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,oBAAjB;AAAsC,QAAA,OAAO,EAAC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,GAAG,EAAER,WADP;AAEE,QAAA,QAAQ,EAAEG,UAFZ;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,EAAE,EAAC,OALL;AAME,QAAA,SAAS,EAAC,4CANZ;AAOE,QAAA,QAAQ;AAPV;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAoBE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AACE,QAAA,SAAS,EAAC,2CADZ;AAEE,QAAA,KAAK,EAAE;AAAES,UAAAA,eAAe,EAAG,OAAMb,KAAK,CAACc,IAAN,CAAWC,KAAM;AAA3C;AAFT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA,kBADF,CAnB6B,CAgD7B;AACD,CAjDD;;GAAMhB,W;;KAAAA,W;AAmDN,eAAeA,WAAf","sourcesContent":["import { useRef } from \"react\";\n\nconst ImageReader = (props) => {\n  const fileElement = useRef(); // referencia al input file\n  const fileReader = new FileReader(); // Creamos un lector de ficheros con FileReader: funcionalidad nativa de JS\n\n  // Cuando la usuaria selecciona una imagen se ejecuta esta función\n  const handleFile = () => {\n    const selectedFile = fileElement.current.files[0]; // fileElement.current.files es un array con todas las imagenes seleccionadas\n    // Si la usuaria ha seleccionado al menos una imagen selectedFile es diferente de undefined\n    if (selectedFile) {\n      fileReader.readAsDataURL(selectedFile); // Le decimos al lector de ficheros que lea el fichero seleccionado por la usuaria. Cuando esta acción termine fileReader lanzará el evento 'load'\n    }\n  };\n\n  // Esta función se ejecuta cuando fileReader lanza el evento 'load'\n  const getImage = () => {\n    props.handleImage(fileReader.result); // Cuando la imagen ya está lista en fileReader.result tenemos su contenido. Hacemos lifting\n  };\n\n  fileReader.addEventListener(\"load\", getImage); // Escuchamos el evento load de fileReader y cuando se lance lo manejamos con la función getImage\n  return (\n    <>\n      <label htmlFor=\"image\" className=\"label\">\n        Imagen de perfil\n        <span className=\"span\">*</span>\n      </label>\n      <div className=\"action\">\n        <label className=\"action__upload-btn\" htmlFor=\"photo\">\n          Añadir Imagen\n        </label>\n        <input\n          ref={fileElement}\n          onChange={handleFile}\n          type=\"file\"\n          name=\"photo\"\n          id=\"photo\"\n          className=\"action__hiddenField js__profile-upload-btn\"\n          required\n        />\n      </div>\n\n      <div className=\"profile\">\n        <div\n          className=\"AQUI profile__preview js__profile-preview\"\n          style={{ backgroundImage: `url(${props.data.photo})` }}\n        ></div>\n      </div>\n    </>\n  );\n  //handleImage={handleImage} />\n};\n\nexport default ImageReader;\n"]},"metadata":{},"sourceType":"module"}